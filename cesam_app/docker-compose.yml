version: '3.9'

services:
  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: jwt_auth_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_password123   # obligatoire pour l'initialisation


    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./backend/database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    networks:
      - auth_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Node.js
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: jwt_auth_backend
    restart: unless-stopped
    env_file:
      - ./backend/.env
    ports:
      - "3000:3000"
      - "443:443"
    volumes:
      - ./backend:/usr/src/app
      #- /usr/src/app/node_modules
      - ./ssl:/usr/src/app/ssl
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - auth_network
    command: npm run dev

  # Adminer (optionnel)
  adminer:
    image: adminer:4.8.1
    container_name: jwt_auth_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - auth_network
    environment:
      ADMINER_DEFAULT_SERVER: postgres

volumes:
  postgres_data:
    driver: local

networks:
  auth_network:
    driver: bridge
